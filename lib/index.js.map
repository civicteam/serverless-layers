{"version":3,"sources":["../src/index.js"],"names":["BbPromise","require","path","slugify","chalk","semver","Runtimes","LayersService","BucketService","CloudFormationService","ZipService","LocalFolders","Dependencies","ServerlessLayers","serverless","options","cacheObject","initialized","hooks","bind","then","init","deployLayers","finalizeDeploy","cleanUpAllLayers","provider","getProvider","service","region","getRegion","log","main","version","getVersion","lt","process","exit","runtimes","settings","getSettings","cliOpts","layerName","currentSettings","enabledFuncs","functions","deploySingle","indexOf","logGroup","initServices","console","arn","warn","cleanUpLayers","currentLayerName","zipService","dependencies","localFolders","layersService","bucketService","cloudFormationService","inboundSetting","dependencyInstall","compileDir","customInstallationCommand","layersDeploymentBucket","deploymentBucket","getDefaultSettings","inboundSettings","custom","Array","isArray","forEach","Object","keys","mergeCommonSettings","hasSettingsVerified","localDir","manifest","JSON","stringify","getFile","remoteSettings","putFile","relateLayerWithFunctions","useChecksum","install","hasSettingsChanged","hasFoldersChanged","hasDepsChanged","hasDependencesChanged","noChanges","mergePackageOptions","getLayerArn","currentLayerARN","inverse","green","logArn","yellow","copyFolders","uploadZipFile","publishVersion","depsPath","getDepsPath","runtimeDir","depsBody","current","getCompiledLayerPackageJson","LayerVersionArn","stackName","getStackName","lower","replacement","naming","Error","join","cwd","getLayerName","serviceStage","stage","deploymentPrefix","getDeploymentPrefix","replace","layersArn","getOutputs","outputs","logicalId","getOutputLogicalId","find","x","OutputKey","OutputValue","getLambdaLayerOutputLogicalId","packageExclude","pkg","opts","individually","excludeDevDependencies","exclude","excludeFile","hasRule","push","layerArn","funcs","funcName","isEnabled","layers","from","Set","magenta","bold","resources","Outputs","outputName","assign","Value","Export","Name","localPackage","map","lambdaFunc","length","msg","signal","greenBright","white","cli","yellowBright","red","pattern","name","formated","module","exports"],"mappings":"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","sourcesContent":["const BbPromise = require('bluebird');\nconst path = require('path');\nconst slugify = require('slugify');\nconst chalk = require('chalk');\nconst semver = require('semver');\nconst Runtimes = require('./runtimes');\nconst LayersService = require('./aws/LayersService');\nconst BucketService = require('./aws/BucketService');\nconst CloudFormationService = require('./aws/CloudFormationService');\nconst ZipService = require('./package/ZipService');\nconst LocalFolders = require('./package/LocalFolders');\nconst Dependencies = require('./package/Dependencies');\n\nclass ServerlessLayers {\n  constructor(serverless, options) {\n    this.cacheObject = {};\n    this.options = options;\n    this.serverless = serverless;\n    this.initialized = false;\n\n    // hooks\n    this.hooks = {\n      'before:package:createDeploymentArtifacts': () => BbPromise.bind(this)\n        .then(() => {\n          return this.init()\n            .then(() => this.deployLayers());\n        }),\n      'aws:info:displayLayers': () => BbPromise.bind(this)\n        .then(() => this.init())\n        .then(() => this.finalizeDeploy()),\n      'after:deploy:function:deploy': () => BbPromise.bind(this)\n        .then(() => this.init())\n        .then(() => this.finalizeDeploy()),\n      'plugin:uninstall:uninstall': () => BbPromise.bind(this)\n        .then(() => {\n          return this.init()\n            .then(() => this.cleanUpAllLayers());\n        }),\n      'remove:remove': () => BbPromise.bind(this)\n        .then(() => {\n          return this.init()\n            .then(() => this.cleanUpAllLayers());\n        })\n    };\n  }\n\n  async init() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.provider = this.serverless.getProvider('aws');\n    this.service = this.serverless.service;\n    this.options.region = this.provider.getRegion();\n\n    // bindings\n    this.log = this.log.bind(this);\n    this.main = this.main.bind(this);\n\n    const version = this.serverless.getVersion();\n\n    if (semver.lt(version, '1.34.0')) {\n      this.log(`Error: Please install serverless >= 1.34.0 (current ${this.serverless.getVersion()})`);\n      process.exit(1);\n    }\n  }\n\n  async deployLayers() {\n    this.runtimes = new Runtimes(this);\n    const settings = this.getSettings();\n\n    const cliOpts = this.provider.options;\n\n    for (const layerName in settings) {\n      const currentSettings = settings[layerName];\n      const enabledFuncs = currentSettings.functions;\n\n      // deploying a single function\n      const deploySingle = !!(cliOpts.function && enabledFuncs);\n\n      // skip layers that is not related with specified function\n      if (deploySingle && enabledFuncs.indexOf(cliOpts.function) === -1) {\n        continue;\n      }\n\n      this.logGroup(layerName);\n      await this.initServices(layerName, currentSettings);\n      await this.main();\n    }\n\n    console.log('\\n');\n  }\n\n  async cleanUpAllLayers() {\n    this.runtimes = new Runtimes(this);\n    const settings = this.getSettings();\n    for (const layerName in settings) {\n      const currentSettings = settings[layerName];\n      this.logGroup(layerName);\n\n      if (currentSettings.arn) {\n        this.warn(` (skipped) arn: ${currentSettings.arn}`);\n        continue;\n      }\n\n      await this.initServices(layerName, currentSettings);\n      await this.cleanUpLayers();\n    }\n  }\n\n  async initServices(layerName, settings) {\n    this.currentLayerName = layerName;\n    this.settings = settings;\n    this.zipService = new ZipService(this);\n    this.dependencies = new Dependencies(this);\n    this.localFolders = new LocalFolders(this);\n    this.layersService = new LayersService(this);\n    this.bucketService = new BucketService(this);\n    this.cloudFormationService = new CloudFormationService(this);\n    this.initialized = true;\n  }\n\n  mergeCommonSettings(inboundSetting) {\n    return {\n      path: '.',\n      functions: null,\n      dependencyInstall: true,\n      compileDir: '.serverless',\n      customInstallationCommand: null,\n      layersDeploymentBucket: this.service.provider.deploymentBucket,\n      ...this.runtimes.getDefaultSettings(inboundSetting)\n    };\n  }\n\n  getSettings() {\n    const inboundSettings = (this.serverless.service.custom || {})[\n      'serverless-layers'\n    ];\n\n    if (Array.isArray(inboundSettings)) {\n      const settings = {};\n      inboundSettings.forEach(inboundSetting => {\n        const layerName = Object.keys(inboundSetting)[0];\n        settings[layerName] = this.mergeCommonSettings(inboundSetting[layerName]);\n      });\n      return settings;\n    }\n\n    return {\n      default: this.mergeCommonSettings(inboundSettings)\n    };\n  }\n\n  hasSettingsChanged() {\n    // don't check settings changes twice\n    if (this.hasSettingsVerified) {\n      return false;\n    }\n\n    // by pass settings\n    if (!this.settings.localDir) {\n      return false;\n    }\n\n    const manifest = '__meta__/manifest-settings.json';\n    const currentSettings = JSON.stringify(this.settings);\n\n    // settings checked\n    this.hasSettingsVerified = true;\n\n    return this.bucketService.getFile(manifest).then((remoteSettings) => {\n      // create and return true (changed)\n      if (!remoteSettings) {\n        return this.bucketService.putFile(manifest, currentSettings)\n          .then(() => true);\n      }\n\n      if (remoteSettings !== currentSettings) {\n        return this.bucketService.putFile(manifest, currentSettings)\n          .then(() => true);\n      }\n\n      return false;\n    });\n  }\n\n  async main() {\n    // static ARN\n    if (this.settings.arn) {\n      this.relateLayerWithFunctions(this.settings.arn);\n      return;\n    }\n\n    await this.runtimes.init();\n    await this.dependencies.init();\n    await this.localFolders.init();\n\n    // ENABLED by default\n    // in checksum mode we need to install before checking dependency differences\n    if (this.settings.dependencyInstall && this.settings.useChecksum) {\n      await this.dependencies.install();\n    }\n\n    // it avoids issues if user changes some configuration\n    // which will not be applied till dependencies be changed\n    const hasSettingsChanged = await this.hasSettingsChanged();\n\n    // check if directories content has changed\n    // comparing hash md5 remote with local folder\n    let hasFoldersChanged = false;\n    if (this.settings.localDir) {\n      hasFoldersChanged = await this.localFolders.hasFoldersChanged();\n    }\n\n    // check if dependencies has changed comparing\n    // remote package.json with local one\n    let hasDepsChanged = false;\n    if (this.settings.dependencyInstall) {\n      hasDepsChanged = await this.runtimes.hasDependencesChanged();\n    }\n\n    // check if something has changed\n    const noChanges = (!hasFoldersChanged && !hasDepsChanged && !hasSettingsChanged);\n\n    // merge package default options\n    this.mergePackageOptions();\n\n    const currentLayerARN = await this.getLayerArn();\n    if (noChanges && currentLayerARN) {\n      this.log(`${chalk.inverse.green(' No changes ')}! Using same layer arn: ${this.logArn(currentLayerARN)}`);\n      this.relateLayerWithFunctions(currentLayerARN);\n      return;\n    }\n\n    this.log(chalk.inverse.yellow(' Changes identified! '));\n\n    // ENABLED by default\n    // in checksum mode dependencies should be already installed at this point\n    if (this.settings.dependencyInstall && !this.settings.useChecksum) {\n      await this.dependencies.install();\n    }\n\n    if (this.settings.localDir) {\n      await this.localFolders.copyFolders();\n    }\n\n    await this.zipService.package();\n    await this.bucketService.uploadZipFile();\n    const version = await this.layersService.publishVersion();\n\n    // In checksum mode we upload package.json from compile directory,\n    // as it contains the updated checksum. Otherwise upload default dependency file.\n    let depsBody;\n    const depsPath = this.dependencies.getDepsPath();\n    if (this.settings.runtimeDir === 'nodejs' && this.settings.useChecksum) {\n      depsBody = JSON.stringify(this.runtimes.current().getCompiledLayerPackageJson(), null, 2);\n    }\n    await this.bucketService.putFile(depsPath, depsBody);\n\n    this.relateLayerWithFunctions(version.LayerVersionArn);\n  }\n\n  getLayerName() {\n    const stackName = this.getStackName();\n    const { runtimeDir } = this.settings;\n    return slugify(`${stackName}-${runtimeDir}-${this.currentLayerName}`, {\n      lower: true,\n      replacement: '-'\n    });\n  }\n\n  getStackName() {\n    return this.provider.naming.getStackName();\n  }\n\n  getBucketName() {\n    if (!this.settings.layersDeploymentBucket) {\n      throw new Error(\n        'Please, you should specify \"deploymentBucket\" or \"layersDeploymentBucket\" option for this plugin!\\n'\n      );\n    }\n    return this.settings.layersDeploymentBucket;\n  }\n\n  getPathZipFileName() {\n    return `${path.join(process.cwd(), this.settings.compileDir, this.getLayerName())}.zip`;\n  }\n\n  getBucketLayersPath() {\n    const serviceStage = `${this.serverless.service.service}/${this.options.stage}`;\n\n    let deploymentPrefix = 'serverless';\n    if (this.provider.getDeploymentPrefix) {\n      deploymentPrefix = this.provider.getDeploymentPrefix();\n    }\n\n    return path.join(\n      deploymentPrefix,\n      serviceStage,\n      'layers'\n    ).replace(/\\\\/g, '/');\n  }\n\n  async getLayerArn() {\n    if (!this.cacheObject.layersArn) {\n      this.cacheObject.layersArn = {};\n    }\n\n    // returns cached arn\n    if (this.cacheObject.layersArn[this.currentLayerName]) {\n      return this.cacheObject.layersArn[this.currentLayerName];\n    }\n\n    const outputs = await this.cloudFormationService.getOutputs();\n\n\n    if (!outputs) return null;\n\n    const logicalId = this.getOutputLogicalId();\n\n    const arn = (outputs.find(x => x.OutputKey === logicalId) || {}).OutputValue;\n\n    // cache arn\n    this.cacheObject.layersArn[this.currentLayerName] = arn;\n\n    return arn;\n  }\n\n  getOutputLogicalId() {\n    return this.provider.naming.getLambdaLayerOutputLogicalId(this.getLayerName());\n  }\n\n  mergePackageOptions() {\n    const { packageExclude } = this.settings;\n    const pkg = this.service.package;\n\n    const opts = {\n      individually: false,\n      excludeDevDependencies: false,\n      exclude: []\n    };\n\n    this.service.package = { ...opts, ...pkg };\n\n    for (const excludeFile of packageExclude) {\n      const hasRule = (this.service.package.exclude || '').indexOf(excludeFile);\n      if (hasRule === -1) {\n        this.service.package.exclude.push(excludeFile);\n      }\n    }\n  }\n\n  relateLayerWithFunctions(layerArn) {\n    this.log('Adding layers...');\n    const { functions } = this.service;\n    const funcs = this.settings.functions;\n    const cliOpts = this.provider.options;\n\n    Object.keys(functions).forEach(funcName => {\n      if (cliOpts.function && cliOpts.function !== funcName) {\n        return;\n      }\n\n      let isEnabled = !funcs;\n\n      if (Array.isArray(funcs) && funcs.indexOf(funcName) !== -1) {\n        isEnabled = true;\n      }\n\n      if (isEnabled) {\n        functions[funcName].layers = functions[funcName].layers || [];\n        functions[funcName].layers.push(layerArn);\n        functions[funcName].layers = Array.from(new Set(functions[funcName].layers));\n        this.log(`function.${chalk.magenta.bold(funcName)} - ${this.logArn(layerArn)}`, ' ✓');\n      } else {\n        this.warn(`(Skipped) function.${chalk.magenta.bold(funcName)}`, ' x');\n      }\n    });\n\n    this.service.resources = this.service.resources || {};\n    this.service.resources.Outputs = this.service.resources.Outputs || {};\n\n    const outputName = this.getOutputLogicalId();\n\n    Object.assign(this.service.resources.Outputs, {\n      [outputName]: {\n        Value: layerArn,\n        Export: {\n          Name: outputName\n        }\n      }\n    });\n  }\n\n  getDependenciesList() {\n    return Object.keys((this.localPackage.dependencies || [])).map(x => (\n      `${x}@${this.localPackage.dependencies[x]}`\n    ));\n  }\n\n  async finalizeDeploy() {\n    const cliOpts = this.provider.options;\n    this.logGroup('Layers Info');\n    Object.keys(this.service.functions).forEach(funcName => {\n      const lambdaFunc = this.service.functions[funcName];\n      const layers = lambdaFunc.layers || [];\n\n      if (!cliOpts.function && layers.length === 0) {\n        this.warn(`(skipped) function.${chalk.magenta.bold(funcName)}`);\n        return;\n      }\n\n      layers.forEach((currentLayerARN) => {\n        if (cliOpts.function && cliOpts.function === funcName) {\n          this.log(`function.${chalk.magenta.bold(funcName)} = layers.${this.logArn(currentLayerARN)}`);\n          return;\n        }\n        this.log(`function.${chalk.magenta.bold(funcName)} = layers.${this.logArn(currentLayerARN)}`);\n      });\n    });\n    console.log('\\n');\n  }\n\n  log(msg, signal = ' ○') {\n    console.log('...' + `${chalk.greenBright.bold(signal)} ${chalk.white(msg)}`);\n  }\n\n  logGroup(msg) {\n    console.log('\\n');\n    this.serverless.cli.log(`[ LayersPlugin ]: ${chalk.magenta.bold('=>')} ${chalk.greenBright.bold(msg)}`);\n  }\n\n  warn(msg, signal = ' ∅') {\n    console.log(`...${chalk.yellowBright(`${chalk.yellowBright.bold(signal)} ${msg}`)}`);\n  }\n\n  error(msg, signal = ' ⊗') {\n    console.log(`...${chalk.red(`${signal} ${chalk.white.bold(msg)}`)}`);\n  }\n\n  cleanUpLayers() {\n    return this.layersService.cleanUpLayers();\n  }\n\n  logArn(arn) {\n    const pattern = /arn:aws:lambda:([^:]+):([0-9]+):layer:([^:]+):([0-9]+)/g;\n    const region = chalk.bold('$1');\n    const name = chalk.magenta('$3');\n    const formated = chalk.white(`arn:aws:lambda:${region}:*********:${name}:$4`);\n    return arn.replace(pattern, formated);\n  }\n}\n\nmodule.exports = ServerlessLayers;\n"],"file":"index.js"}